event Account_LogonAttmpt:
    key:
        event_src.host, subject.account.name, subject.process.id, object.account.name
    filter {
        filter::NotFromCorrelator() and
        event_src.title == "windows" and 
        msgid == "4648" and 
        lower(object) == "account" and
        lower(action) == "elevate" and   
        subject.account.name != object.account.name and
        in_list(["winlogon.exe", "wininit.exe"], lower(subject.process.name)) == False and # UMFD-*, DWM-*
        in_list(["localhost", event_src.hostname], dst.hostname)
    }

event Account_LogonSuccess:
    key:
        event_src.host, subject.account.name, subject.process.id, object.account.name
    filter {
        filter::NotFromCorrelator() and
        event_src.title == "windows" and 
        msgid == "4624" and 
        in_list([2, 3], logon_type) and
        lower(object) == "account" and
        lower(action) == "elevate" and
        subject.account.name != object.account.name and 
        lower(logon_service) == "advapi" and # contain LogonUser() and CreateProcessAsUser() func
        in_list(["winlogon.exe", "wininit.exe"], subject.process.name) == False # UMFD-*, DWM-*
    }

rule CreateProcessAsUser_Impersonation: Account_LogonAttmpt and Account_LogonSuccess

    on Account_LogonSuccess {
        $subject.account.name = subject.account.name
        $subject.account.domain = subject.account.domain
        $subject.account.session_id = subject.account.session_id
        $subject.account.id = subject.account.id
        $subject.account.privileges = subject.account.privileges

        $subject.process.id = subject.process.id
        $subject.process.name = subject.process.name
        $subject.process.path = subject.process.path
        $subject.process.fullpath = subject.process.fullpath
        
        $object.account.name = object.account.name
        $object.account.domain = object.account.domain
        $object.account.session_id = object.account.session_id
        $object.account.id = object.account.id

        $logon_type = logon_type
        $logon_auth_method = logon_auth_method
        $logon_service = logon_service
        $datafield9 = datafield9 # Пакет проверки подлинности

        # event src host
        $event_src.host = event_src.host
        $event_src.fqdn = event_src.fqdn
        $event_src.hostname = event_src.hostname
        $event_src.ip = event_src.ip
        $event_src.asset = event_src.asset
        $event_src.vendor = event_src.vendor
        $event_src.title = event_src.title
        $event_src.subsys = event_src.subsys
        $event_src.category = event_src.category
    }

    on Account_LogonAttmpt {       

        # src
        $src.host = src.host
        $src.hostname = src.hostname
        $src.ip = src.ip
        $src.asset = src.asset
        $src.port = src.port

        # dst
        $dst.host = dst.host
        $dst.hostname = dst.hostname
        $dst.ip = dst.ip
        $dst.asset = dst.asset
        $dst.port = dst.port

        $subject = subject
        $action = action
        $object = object
        $status = status
    }

emit {
    $correlation_type = "incident"

    $importance = "medium"

    $category.generic = "Attack"
    $category.high = "Privilege Escalation"
    $category.low = "Access Token Manipulation: Token Impersonation/Theft"

    $incident.aggregation.key = join([$correlation_name, lower($event_src.host), lower($subject.account.name), lower($subject.process.id), lower($object.account.name)], "|")
    $incident.aggregation.timeout = 2h

    $incident.severity = "medium"

    $incident.category = "Undefined"
    $incident.type = "SoftwareSuspiciousActivity"
}
