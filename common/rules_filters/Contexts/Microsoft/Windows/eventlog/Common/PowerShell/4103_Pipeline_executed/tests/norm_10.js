{
    "action": "execute",
    "category.generic": "Command",
    "category.high": "System Management",
    "category.low": "Manipulation",
    "chain_id": "1",
    "datafield8": "5.1.19041.1",
    "event_src.category": "Operating system",
    "event_src.fqdn": "adavadov-nb.domain.com",
    "event_src.hostname": "adavadov-nb",
    "event_src.subsys": "Microsoft-Windows-PowerShell/Operational",
    "event_src.title": "windows",
    "event_src.vendor": "microsoft",
    "id": "PT_Microsoft_Windows_eventlog_Common_PowerShell_4103_pipeline_executed",
    "importance": "info",
    "msgid": "4103",
    "object": "command",
    "object.account.domain": "domain",
    "object.account.id": "S-1-5-21-1234567890-712345657-3456789122-12345",
    "object.account.name": "adavadov",
    "object.process.cmdline": "\"New-Object\" -TypeName \"System.Collections.Generic.HashSet[string]\" -ArgumentList \"\"",
    "object.process.name": "New-Object",
    "object.process.parent.cmdline": "powershell.exe -noprofile -noninteractive -c  $erroractionpreference = 'silentlycontinue'; [system.console]::outputencoding = [system.text.encoding]::utf8;  filter arraytohash {     begin { $hash = @{} }     process { $hash[$_.packagefamilyname] = $_ }     end { return $hash } }  [string[]]$alreadyknownappids = \"microsoft.microsoftedge_8wekyb3d8bbwe!microsoftedge\",\"microsoft.windows.sechealthui_cw5n1h2txyewy!sechealthui\",\"windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel\",\"microsoft.549981c3f5f10_8wekyb3d8bbwe!app\",\"microsoft.gethelp_8wekyb3d8bbwe!app\",\"microsoft.microsoftstickynotes_8wekyb3d8bbwe!app\",\"microsoft.mixedreality.portal_8wekyb3d8bbwe!app\",\"microsoft.screensketch_8wekyb3d8bbwe!app\",\"microsoft.windows.photos_8wekyb3d8bbwe!app\",\"microsoft.windowscalculator_8wekyb3d8bbwe!app\",\"microsoft.windowscamera_8wekyb3d8bbwe!app\",\"microsoft.windowssoundrecorder_8wekyb3d8bbwe!app\",\"microsoft.windowsstore_8wekyb3d8bbwe!app\",\"microsoft.xboxgamingoverlay_8wekyb3d8bbwe!app\",\"microsoft.yourphone_8wekyb3d8bbwe!app\",\"appup.intelgraphicsexperience_8j3eq9eme6ctt!app\",\"appup.thunderboltcontrolcenter_8j3eq9eme6ctt!app\",\"appup.inteloptanememoryandstoragemanagement_8j3eq9eme6ctt!app\",\"microsoft.windowsterminal_8wekyb3d8bbwe!app\",\"videolan.vlc_paz6r1rewnh0a!app\",\"dellinc.dellsupportassistforpcs_htrsf667h5kn2!app\"; $alreadyknownappidsset = new-object system.collections.generic.hashset[string] (,$alreadyknownappids);  $currentstartapps = get-startapps | where-object { $_.appid.contains(\"!\") }; $currentstartappids = $currentstartapps | select-object -expandproperty appid; $currentstartappidsset = new-object system.collections.generic.hashset[string] (,[string[]]$currentstartappids); $newstartapps = $currentstartapps | where-object { -not $alreadyknownappidsset.contains($_.appid) }; $newstartappids = $newstartapps | select-object -expandproperty appid; $newstartappidsset = new-object system.collections.generic.hashset[string] (,[string[]]$newstartappids); $removedappids = $alreadyknownappids | where-object { -not $currentstartappidsset.contains($_) }; if ($newstartapps.count -eq 0) {     return [pscustomobject]@{         newapps = @();         removedappids = @($removedappids);     } | convertto-json }  function findlogofilepath {     param ([string]$logofilepath)     if ([system.io.file]::exists($logofilepath) -eq $true) {         return $logofilepath;     }     $filepath = get-childitem $logofilepath.replace(\".png\", \".scale-*.png\") |         sort-object -property name |         select-object -first 1 -expandproperty fullname;     if ($filepath -ne $null) {         $logofilepath = $filepath;     }     if ([system.io.file]::exists($logofilepath) -eq $true) {         return $logofilepath;     }     $filepath = get-childitem $logofilepath.replace(\".png\", \".targetsize-*.png\") |         where-object { ($_.name -match \"targetsize-(\\d+)\\.png\") -and ($matches[1] -ge 48) } |         sort-object -property name |         select-object -first 1 -expandproperty fullname;     if ($filepath -ne $null) {         $logofilepath = $filepath;     }     if ([system.io.file]::exists($logofilepath) -eq $true) {         return $logofilepath;     }     $filepath = get-childitem $logofilepath.replace(\".png\", \".targetsize-*.png\") |         where-object { ($_.name -match \"targetsize-(\\d+).*\\.png\") -and ($matches[1] -ge 48) } |         sort-object -property name |         select-object -first 1 -expandproperty fullname;     if ($filepath -ne $null) {         $logofilepath = $filepath;     }     if ([system.io.file]::exists($logofilepath) -eq $true) {         return $logofilepath;     } else {         return $null;     } }  $packagefamilynamestopackages = get-appxpackage -packagetypefilter main | arraytohash; $newapps = $newstartapps |     foreach-object {         $appid = $_.appid.substring($_.appid.indexof(\"!\") + 1);         $packagefamilyname = $_.appid.substring(0, $_.appid.indexof(\"!\"));         $package = $packagefamilynamestopackages[$packagefamilyname];         $packagefullname = $package.packagefullname;         if ($packagefullname -ne $null) {             $manifest = get-appxpackagemanifest $packagefullname;             $app = $manifest.package.applications.application | where-object { $_.id -eq $appid };             $logo = $app.visualelements.square44x44logo;             if ($logo -eq $null) {                 $logo = $app.visualelements.square30x30logo;             }             if ($logo -eq $null) {                 $logo = $app.visualelements.logo;             }             if ($logo -ne $null) {                 $logofilepath = findlogofilepath (join-path $package.installlocation $logo);                 if ($logofilepath -eq $null) {                     write-host (\"trying alternative location: \" + (join-path $package.installlocation \"images\" $logo));                     $logofilepath = findlogofilepath ([io.path]::combine($package.installlocation, \"images\", $logo));                 }                 if ($logofilepath -ne $null) {                     $logobytes = get-content -encoding byte -path $logofilepath;                     $logobase64 = [convert]::tobase64string($logobytes);                 } else {                     $logobase64 = \"\";                 }             } else {                 $logobase64 = \"\";             }             return [pscustomobject]@{                 displayname = $_.name;                 appid = $_.appid;                 logobase64 = $logobase64;             }         }     }; return [pscustomobject]@{     newapps = @($newapps);     removedappids = @($removedappids); } | convertto-json",
    "object.process.parent.guid": "5d9f086a-4cdc-47c0-9f8a-bff4708e1e8f",
    "object.process.parent.id": "724",
    "object.value": "CommandInvocation(New-Object): \"New-Object\"\r\nParameterBinding(New-Object): имя=\"TypeName\"; значение=\"System.Collections.Generic.HashSet[string]\"\r\nParameterBinding(New-Object): имя=\"ArgumentList\"; значение=\"\"\r\nTerminatingError(New-Object): \"Обнаружено несколько неоднозначных перегрузок для \"HashSet`1\", число аргументов: \"1\".\"",
    "reason": "Обнаружено несколько неоднозначных перегрузок для \"HashSet`1\", число аргументов: \"1\".",
    "status": "failure",
    "subject": "account",
    "subject.account.domain": "domain",
    "subject.account.id": "S-1-5-21-1234567890-712345657-3456789122-12345",
    "subject.account.name": "adavadov",
    "time": "2021-10-06T08:04:30.041Z"
}
